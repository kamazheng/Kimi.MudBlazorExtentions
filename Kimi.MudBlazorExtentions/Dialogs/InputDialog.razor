@using Microsoft.AspNetCore.Components;
@using Kimi.MudBlazorExtentions.Extensions;
@using Kimi.MudBlazorExtentions.Generics;
@typeparam T

<MudDialog DefaultFocus="DefaultFocus.Element">
    <DialogContent>
        <MudText Class="mb-3">@ContentText</MudText>
        @{
            var underlyingType = Nullable.GetUnderlyingType(typeof(T)) ?? typeof(T);
            var properties = underlyingType.IsClass && underlyingType != typeof(string) ? underlyingType.GetProperties() : null;
        }
        @if (properties != null && properties.Length > 0)
        {
            foreach (var property in properties)
            {
                <DynamicInput ClassInstance="@InputContent" PropertyInfo="@property" ClassInstanceChanged="e => 
                                {
                                    InputContent = TypeExtensions.ChangeType<T?>(e);
                                }" />
            }
        }
        else if (underlyingType.IsTuple())
        {
            var fields = underlyingType.GetFields();
            for (int i = 0; i < fields.Length; i++)
            {
                var field = fields[i];
                var label = TupleLabels == null ? field.Name : TupleLabels[i];
                <FieldInfoInput TupleInstance="InputContent" FieldInfo="field" Label="@(label)" 
                     TupleInstanceChanged="
                            e => {
                                InputContent = TypeExtensions.ChangeType<T?>(e);
                            }"
                 ></FieldInfoInput>
            }
        }
        else
        {
            <GenericInput @bind-Value="@InputContent"></GenericInput>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="@Color" Variant="Variant.Filled" OnClick="Submit">@SubmitButtonText</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Secondary">@CancelButtonText</MudButton>
    </DialogActions>
</MudDialog>