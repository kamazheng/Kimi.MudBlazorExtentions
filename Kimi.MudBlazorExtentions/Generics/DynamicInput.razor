@using Kimi.MudBlazorExtentions.Extensions
@using MudBlazor
@inherits MudBaseInput<object>

@if (ClassInstance != null)
{
    if (subPropertyInfos != null && subPropertyInfos.Length > 0)
    {
        <MudText Typo="Typo.subtitle1" Class="mt-5">@underlyingType!.GetDisplayLabel()</MudText>
        foreach (var property in subPropertyInfos)
        {
            <DynamicInput ClassInstance="@classPropertyValue" PropertyInfo="@property"
                          ClassInstanceChanged="e =>{
                                    classPropertyValue = e;
                                    ClassInstanceChanged.InvokeAsync(ClassInstance);
                                }" />
        }
    }
    else
    {
        System.TypeCode typeCode = Type.GetTypeCode(underlyingType);
        @if (underlyingType == typeof(DateOnly))
        {
            <MudDatePicker Date="@(DateTime.Parse(Value?.ToString() ?? DateTime.Now.ToString()))"
                           DateChanged="(e) => {
                                    Value =(object)TypeExtensions.ChangeType<DateTime>(DateOnly.FromDateTime((DateTime)e!));
                                    ClassInstance.SetPropertyValue(PropertyInfo.Name, Value);
                                    ClassInstanceChanged.InvokeAsync(ClassInstance);
                                }"
                           Label="@PropertyInfo.GetDisplayLabel()"
                           Margin="@Margin"
                           HelperText="@HelperText"
                           Adornment="@Adornment"
                           AdornmentIcon="@AdornmentIcon"
                           Variant="Variant"
                           Disabled="Disabled"
                           ReadOnly="ReadOnly"
                           @attributes="AdditionalAttributes" />
        }
        else if (underlyingType == typeof(TimeOnly))
        {
            <MudTimePicker Time="@(DateTime.Parse(Value?.ToString() ?? DateTime.Now.ToString()).TimeOfDay)"
                           TimeChanged="(e) => {
                                    Value = (object)TypeExtensions.ChangeType<DateTime>(TimeOnly.FromTimeSpan((TimeSpan)e!));
                                    ClassInstance.SetPropertyValue(PropertyInfo.Name, Value);
                                    ClassInstanceChanged.InvokeAsync(ClassInstance);
                                }"
                           Label="@PropertyInfo.GetDisplayLabel()"
                           Margin="@Margin"
                           HelperText="@HelperText"
                           Adornment="@Adornment"
                           AdornmentIcon="@AdornmentIcon"
                           Variant="Variant"
                           Disabled="Disabled"
                           ReadOnly="ReadOnly"
                           @attributes="AdditionalAttributes" />
        }
        else
        {
            switch (typeCode)
            {
                case TypeCode.DateTime:
                    var dateLable = PropertyInfo.GetDisplayLabel() + " Day";
                    var timeLable = PropertyInfo.GetDisplayLabel() + " Time";
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudDatePicker Date="@(DateTime.Parse(Value?.ToString() ?? DateTime.Now.ToString()))"
                                           DateChanged="(e) => {
                                        var date = e ?? DateTime.Now;
                                        var time = DateTime.Parse(Value?.ToString() ?? DateTime.Now.ToString()).TimeOfDay;
                                        Value =(object)TypeExtensions.ChangeType<DateTime>(date.Date + time);
                                        ClassInstance.SetPropertyValue(PropertyInfo.Name, Value);
                                        ClassInstanceChanged.InvokeAsync(ClassInstance);
                                        }"
                                           Label="@dateLable"
                                           Margin="@Margin"
                                           HelperText="@HelperText"
                                           Adornment="@Adornment"
                                           AdornmentIcon="@AdornmentIcon"
                                           Variant="Variant"
                                           Disabled="Disabled"
                                           ReadOnly="ReadOnly"
                                           @attributes="AdditionalAttributes" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTimePicker Time="@(DateTime.Parse(Value?.ToString() ?? DateTime.Now.ToString()).TimeOfDay)"
                                           TimeChanged="(e) => {
                                        var time = e ?? TimeSpan.Zero;
                                        var date = DateTime.Parse(Value?.ToString() ?? DateTime.Now.ToString()).Date;
                                        Value = (object)TypeExtensions.ChangeType<DateTime>(date + time);
                                        ClassInstance.SetPropertyValue(PropertyInfo.Name, Value);
                                        ClassInstanceChanged.InvokeAsync(ClassInstance);
                                   }"
                                           Label="@timeLable"
                                           Margin="@Margin"
                                           HelperText="@HelperText"
                                           Adornment="@Adornment"
                                           AdornmentIcon="@AdornmentIcon"
                                           Variant="Variant"
                                           Disabled="Disabled"
                                           ReadOnly="ReadOnly"
                                           @attributes="AdditionalAttributes" />
                        </MudItem>
                    </MudGrid>
                    break;
                case TypeCode.Boolean:
                    <MudCheckBox T="bool?"
                                 Label="@PropertyInfo.GetDisplayLabel()"
                                 LabelPosition="LabelPosition.End"
                                 Value="@((bool?)Value)"
                                 ValueChanged="(e) => {
                                        Value = (object)TypeExtensions.ChangeType<bool>(e);
                                        ClassInstance.SetPropertyValue(PropertyInfo.Name, Value);
                                        ClassInstanceChanged.InvokeAsync(ClassInstance);
                                   }"
                                 Disabled="Disabled"
                                 ReadOnly="ReadOnly"
                                 @attributes="AdditionalAttributes"></MudCheckBox>
                    break;
                case TypeCode.Single:
                case TypeCode.Double:
                case TypeCode.Decimal:
                case TypeCode.Int16:
                case TypeCode.Int32:
                case TypeCode.Int64:
                    <MudNumericField T="double"
                                     Value="@(Value == null ? 0:(double)Value)"
                                     ValueChanged="(e) => {
                                    Value = e;
                                    ClassInstance.SetPropertyValue(PropertyInfo.Name, Value);
                                    ClassInstanceChanged.InvokeAsync(ClassInstance);
                                }"
                                     Label="@PropertyInfo.GetDisplayLabel()"
                                     Margin="@Margin"
                                     HelperText="@HelperText"
                                     Adornment="@Adornment"
                                     AdornmentIcon="@AdornmentIcon"
                                     Variant="Variant"
                                     Disabled="Disabled"
                                     ReadOnly="ReadOnly"
                                     FullWidth="FullWidth"
                                     Immediate="Immediate"
                                     @attributes="AdditionalAttributes"></MudNumericField>
                    break;
                default:
                    <MudTextField T="string" Value="@(Value==null? "":Value.ToString())"
                                  ValueChanged="(e) => {
                                    Value = e;
                                    ClassInstance.SetPropertyValue(PropertyInfo.Name, Value);
                                    ClassInstanceChanged.InvokeAsync(ClassInstance);
                                }"
                                  Label="@PropertyInfo.GetDisplayLabel()"
                                  Typo="@Typo"
                                  Margin="@Margin"
                                  HelperText="@HelperText"
                                  Adornment="@Adornment"
                                  AdornmentIcon="@AdornmentIcon"
                                  Variant="Variant"
                                  Disabled="Disabled"
                                  ReadOnly="ReadOnly"
                                  FullWidth="FullWidth"
                                  Immediate="Immediate"
                                  @attributes="AdditionalAttributes"></MudTextField>
                    break;
            }
        }
    }
}
